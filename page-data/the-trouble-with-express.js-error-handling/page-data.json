{"componentChunkName":"component---src-templates-blog-post-js","path":"/the-trouble-with-express.js-error-handling/","result":{"data":{"site":{"siteMetadata":{"title":"Pickard's Pickle","author":"Jim Pickard"}},"markdownRemark":{"id":"daea4856-1237-5aee-9390-597ecac0b962","excerpt":"Async Code and Express.js If a promise is rejected in Express, unless it’s handled explicitly, node will\nshow an unhandled promise exception and the browser…","html":"<h2>Async Code and Express.js</h2>\n<p>If a promise is rejected in Express, unless it’s handled explicitly, node will\nshow an unhandled promise exception and the browser will hang, not showing any\nresponse from the server.</p>\n<h3>Error handling</h3>\n<p>Express requires that errors are passed to the <code class=\"language-text\">next</code> function, which is one of the\ninputs to the request handler.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">app.post(&quot;/checkout&quot;, async (req, res, next) =&gt; {\n  let takeawayData;\n  try {\n    takeawayData = await webShopApi.getTakeawayData();\n  } catch (e) {\n    return next(e);\n  }\n}</code></pre></div>\n<p>And then you define an error handler:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// Error handler.\n// eslint-disable-next-line no-unused-vars\napp.use(function (err, req, res, next) {\n  log.err(err.stack);\n  res.status(500).send(&#39;Something went wrong, sorry.&#39;);\n});</code></pre></div>\n<h3>The problem</h3>\n<p>This is really verbose:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">await</span> webShopApi<span class=\"token punctuation\">.</span><span class=\"token function\">finalizeOrder</span><span class=\"token punctuation\">(</span>order<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This works, but doesn’t stop execution (so can only be used when execution ends\nanyway).</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">await webShopApi.finalizeOrder(order).catch(e);</code></pre></div>\n<h3>The solution</h3>","frontmatter":{"title":"The trouble with Express.js error handling (draft)","date":"March 28, 2020","description":"Reducing the verbosity of Express.js error handling"}}},"pageContext":{"slug":"/the-trouble-with-express.js-error-handling/","previous":{"fields":{"slug":"/making-bread/"},"frontmatter":{"title":"Making Bread (draft)"}},"next":null}}}