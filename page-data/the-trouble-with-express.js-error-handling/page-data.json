{"componentChunkName":"component---src-templates-blog-post-js","path":"/the-trouble-with-express.js-error-handling/","result":{"data":{"site":{"siteMetadata":{"title":"Pickard's Pickle","author":"Jim Pickard"}},"markdownRemark":{"id":"daea4856-1237-5aee-9390-597ecac0b962","excerpt":"Async Code and Express.js If a promise is rejected in Express, unless it’s handled explicitly, node will\nshow an unhandled promise exception and the browser…","html":"<h2>Async Code and Express.js</h2>\n<p>If a promise is rejected in Express, unless it’s handled explicitly, node will\nshow an unhandled promise exception and the browser will hang, not showing any\nresponse from the server.</p>\n<h3>References</h3>\n<p>[1] Express error handling documentation\n<a href=\"https://expressjs.com/en/guide/error-handling.html\">https://expressjs.com/en/guide/error-handling.html</a></p>\n<ul>\n<li>Errors that occur in synchronous code inside route handlers and middleware\nrequire no extra work. If synchronous code throws an error, then Express will\ncatch and process it.</li>\n<li>Shows the use of a package called method-override without saying anything\nabout it in the text.</li>\n<li>There is some noise in the examples, for example the use of methodOverride()\nwhich is irrelevant to the examople code.</li>\n<li>It is not clear at all, but the custom error handler must come <em>after</em> the\nroute handlers. This is discussed here <a href=\"https://stackoverflow.com/questions/29700005/express-4-middleware-error-handler-not-being-called\">https://stackoverflow.com/questions/29700005/express-4-middleware-error-handler-not-being-called</a></li>\n</ul>\n<p>[2] Express 5 (in alpha since 2014) adds support for returns and rejected promises in the router.\n<a href=\"https://github.com/expressjs/express/blob/5.0/History.md\">https://github.com/expressjs/express/blob/5.0/History.md</a></p>\n<p>[3] Express 5 tracking issue\n<a href=\"https://github.com/expressjs/express/pull/2237\">https://github.com/expressjs/express/pull/2237</a></p>\n<p>[4] Express 5 Promises\n<a href=\"https://github.com/expressjs/express/issues/2259\">https://github.com/expressjs/express/issues/2259</a></p>\n<p>[5] Good article on how to improvess Express error handling\n<a href=\"https://nemethgergely.com/error-handling-express-async-await/\">https://nemethgergely.com/error-handling-express-async-await/</a></p>\n<ul>\n<li>Shows how to return an error object with httpStatusCode.</li>\n<li>Shows an example of how to wrap the request handler in an method to catch\nrejected promises.</li>\n</ul>\n<p>[6] Article about “async middleware”\n<a href=\"https://dev.to/geoff/writing-asyncawait-middleware-in-express-6i0\">https://dev.to/geoff/writing-asyncawait-middleware-in-express-6i0</a></p>\n<p>[7] Good article about error handling in express\n<a href=\"https://thecodebarbarian.com/80-20-guide-to-express-error-handling\">https://thecodebarbarian.com/80-20-guide-to-express-error-handling</a></p>\n<p>[8] Another article about error handling in express\n<a href=\"https://www.robinwieruch.de/node-express-error-handling\">https://www.robinwieruch.de/node-express-error-handling</a></p>\n<h3>Error handling</h3>\n<p>Express requires that errors are passed to the <code class=\"language-text\">next</code> function, which is one of the\ninputs to the request handler.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/checkout\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> responseData<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    responseData <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://example.com/give-me-an-error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And then you define an error handler:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// Error handler.\n// eslint-disable-next-line no-unused-vars\napp.use(function (err, req, res, next) {\n  log.err(err.stack);\n  res.status(500).send(&#39;Something went wrong, sorry.&#39;);\n});</code></pre></div>\n<h3>The problem</h3>\n<p>This is really verbose:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">await</span> webShopApi<span class=\"token punctuation\">.</span><span class=\"token function\">finalizeOrder</span><span class=\"token punctuation\">(</span>order<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This works, but doesn’t stop execution (so can only be used when execution ends\nanyway).</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">await webShopApi.finalizeOrder(order).catch(e);</code></pre></div>","frontmatter":{"title":"The trouble with Express.js error handling (draft)","date":"March 28, 2020","description":"Reducing the verbosity of Express.js error handling"}}},"pageContext":{"slug":"/the-trouble-with-express.js-error-handling/","previous":{"fields":{"slug":"/making-bread/"},"frontmatter":{"title":"Making Bread"}},"next":null}}}